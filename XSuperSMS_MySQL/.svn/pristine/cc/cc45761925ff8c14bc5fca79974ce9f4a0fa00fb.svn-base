package com.xuesi.sms.app.activity;

import java.util.HashMap;
import java.util.Map;

import android.app.Activity;
import android.os.Bundle;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.honeywell.aidc.AidcManager;
import com.honeywell.aidc.BarcodeFailureEvent;
import com.honeywell.aidc.BarcodeReadEvent;
import com.honeywell.aidc.BarcodeReader;
import com.honeywell.aidc.BarcodeReader.BarcodeListener;
import com.honeywell.aidc.ScannerUnavailableException;
import com.honeywell.aidc.UnsupportedPropertyException;
import com.xuesi.sms.R;

public class TestActivity extends Activity implements BarcodeListener {
	private com.honeywell.aidc.BarcodeReader barcodeReader;
	private AidcManager manager;
	private EditText et;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.item_lv_tvwhite);
		et = (EditText) findViewById(R.id.item_tv_content);
		 barcodeReader = ArrayNaviActivity.getBarcodeObject();
		// AidcManager.create(this, new CreatedCallback() {
		//
		// @Override
		// public void onCreated(AidcManager aidcManager) {
		// manager = aidcManager;
		// barcodeReader = manager.createBarcodeReader();
		// }
		// });
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if (barcodeReader != null) {
			Toast.makeText(this, "!=null...", Toast.LENGTH_SHORT).show();
			// register bar code event listener
			// 注册barcodeReader事件
			barcodeReader.addBarcodeListener(this);

			// set the trigger mode to client control
			try {
				barcodeReader.setProperty(
						BarcodeReader.PROPERTY_TRIGGER_CONTROL_MODE,
						BarcodeReader.TRIGGER_CONTROL_MODE_AUTO_CONTROL);
			} catch (UnsupportedPropertyException e) {
				Toast.makeText(this, "Failed to apply properties",
						Toast.LENGTH_SHORT).show();
			}

			Map<String, Object> properties = new HashMap<String, Object>();
			// Set Symbologies On/Off
			properties.put(BarcodeReader.PROPERTY_CODE_128_ENABLED, true);
			properties.put(BarcodeReader.PROPERTY_GS1_128_ENABLED, true);
			properties.put(BarcodeReader.PROPERTY_QR_CODE_ENABLED, true);
			properties.put(BarcodeReader.PROPERTY_CODE_39_ENABLED, true);
			properties.put(BarcodeReader.PROPERTY_DATAMATRIX_ENABLED, true);
			properties.put(BarcodeReader.PROPERTY_UPC_A_ENABLE, true);
			properties.put(BarcodeReader.PROPERTY_EAN_13_ENABLED, false);
			properties.put(BarcodeReader.PROPERTY_AZTEC_ENABLED, false);
			properties.put(BarcodeReader.PROPERTY_CODABAR_ENABLED, false);
			properties
					.put(BarcodeReader.PROPERTY_INTERLEAVED_25_ENABLED, false);
			properties.put(BarcodeReader.PROPERTY_PDF_417_ENABLED, false);
			// Set Max Code 39 barcode length
			properties.put(BarcodeReader.PROPERTY_CODE_39_MAXIMUM_LENGTH, 10);
			// Turn on center decoding
			properties.put(BarcodeReader.PROPERTY_CENTER_DECODE, true);
			// Enable bad read response
			properties.put(
					BarcodeReader.PROPERTY_NOTIFICATION_BAD_READ_ENABLED, true);
			// Apply the settings
			barcodeReader.setProperties(properties);
		}else{
			Toast.makeText(this, "null...", Toast.LENGTH_SHORT).show();
		}
		if (barcodeReader != null) {
			try {
				barcodeReader.claim();
			} catch (ScannerUnavailableException e) {
				e.printStackTrace();
				Toast.makeText(this, "Scanner unavailable", Toast.LENGTH_SHORT)
						.show();
			}
		}
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		if (barcodeReader != null) {
			// release the scanner claim so we don't get any scanner
			// notifications while paused.
			barcodeReader.release();
		}
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		if (barcodeReader != null) {
			// unregister barcode event listener
			barcodeReader.removeBarcodeListener(this);
			barcodeReader.close();
			barcodeReader = null;
		}

		if (manager != null) {
			// close AidcManager to disconnect from the scanner service.
			// once closed, the object can no longer be used.
			manager.close();
		}
	}

	int i = 0;

	@Override
	public void onBarcodeEvent(final BarcodeReadEvent event) {
		// TODO Auto-generated method stub
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				// update UI to reflect the data
				if (et.getText().toString().equals(event.getBarcodeData())) {
				} else {
					et.setText(event.getBarcodeData());
				}
			}
		});

	}

	@Override
	public void onFailureEvent(BarcodeFailureEvent paramBarcodeFailureEvent) {
		// TODO Auto-generated method stub

	}

}
